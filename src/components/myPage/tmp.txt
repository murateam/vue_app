
                // ////////// MAIN PAGE ///////////////////
                // Меня всегда тянуло в разработку.
                // Но так как мне казалось что программирование это сложно,
                // решил начать с чего нибудь по проще, с 3Д (gamedev).
                // По моему мнения 3Д проще понять.
                // Во время работы мне приходилось сталкиваться с программированием.
                // Например в игровом движке Unreal Engine есть возможность без знаний языка C++
                // собирать какую то логику различного назначения на blueprints.
                // Чем глубже я погружался в 3д, тем чаще я сталкивался
                // с различными дополнительными инструментами написанными энтузиастами
                // или профессионалами для таких программ как autodesk maya или houdini на языке python.
                // И в один момент мне в голову пришла мысль что мне
                // без знаний программирования не обойтись.
                // Оставаясь в 3д индустрии или любой другой программной разработке.
                -- Знание программирования в целом увеличивает понимание всего процесса в целом.
                // На основании этого я принял решения пройти обучения языку python.
                // Но так как просто изучение языка не имеет смысла, а для отработки своих
                // знания нужно какое то прикладное назначение языка
                // Мне на глаза попался курс Веб разработки полного цикла на python.
                // Этот курс координально изменил мое отношение к программированию.
                // Я влюбился в программирование. До этого момоента мне приходилось
                // изучать чужие инструменты, принципы и необходимые условия для их работы.
                // В этом нет ничего плохого но сейчас когда написанные инструкции
                // и последовательности превращаются в работающий механизм,
                // мне кажется это сногсшибательным.

                // В рамках курса, я освоил следующие навыки:
                // - Python:
                //           - Основы
                //           - Коллекции, циклы и логика
                //           - Функции и модули
                //           - Ошибки и исключения. Автоматизированные тесты
                //           - ООП в Python
                //           - Модули и пакеты
                // - html/css/js
                // - SQL
                // - Облака, декораторы, контексты (heroku, git)
                // - django (аккаунты, регистрация, теги и продвинутые вазможности)
                // - работа с API (Telegram, Trello, пост в Slack из python)
                // - Django REST framework (DRF)
                // - Мониторинг и оптимизация (измеряем скорость, sentry)
                // - Сигналы, Кэширование, Memcached
                // - Тестирование (unittest, pytest)
                // - linux (виртуальная машина в облаке)
                // - Сервера (nginx, postgres, gunicorn)
                // - Очереди и асинхронность (Redis, Redis + Python, очередь RQ)
                // - Celery and Docker (Очередь Celery, работа с Docker, Docker-compose)
                // - Vue js (SPA)

                // Конечно не все мои навыки имеют превосходный уровень и еще требуют
                // дальнейшего изучения.
                // Процесс постоянного обучения это неотемлемая часть сферы разработки.
                // //////////////////////////

                // /////// О проекте ///////////////////////
                // Здесь немного информации описывающей демо проект.

                // Начнем с воображаемых требований к будущему проекту
                // Эти требования я выдумал, что бы иметь план действий по разработке.

                // Это приложение созданно для мультибрендового магазина. Т.е. когда один магазин
                // занимается продажей товаров разных производителей.
                // Приложение позволяет создавать заказ клиент с нобором товаров
                // различных брендов и обрабатывать эти товары в зависимости от производителя.
                // Для примера я взял магазин продающий мебель.
                // Реализованы следующие возможности:
                //    - Для продавца:
                //        - Форма клиента:
                //            - создание нового клиента;
                //            - редактирование существующего;
                //        - Форма договора с клиентом - представляет из себя черновик/калькулятор, позволяет
                //        быстро посчитать предполагаемую стоимость, если клиентом внесен платеж больше,
                //        чем половина общей стоимости возможность редактировать договор отключается, можно
                //        только отправить договор в заказ:
                //            - создание нового договора;
                //            - редактирования существующего;
                //            - привязка договора к клиенту;
                //            - клиент может воспользоваться услугами дизайнера, иметь возможность указать
                //            дизайнера и его вознаграждение в договоре;
                //            - Форма товара:
                //                - добавления в заказа - у продовца нет возможности вносить новые товары
                //                в базу данных, если товар не найден он помечается как не корректый и сохраняется
                //                в отдельное поле;
                //                - цена - продавец озвучивает стоимость по прайс листу;
                //            - автоматический расчет в местной валюте (для этого использовать фиксированный
                //            курс, сохранять курс при отправке позиции в заказ);

                //    - Для бухгалтера (используется таже таблица и таже форма договора что и у продовца,
                //    но без вазможности редактировать):
                //        - Форма платежа, создает и привязывает платеж к договору. Сохраняет в договор объем платежа;

                //    - Склад:
                //        - Пока никакой логики, существует для отображения всех позиций

                //    - Заказы для фабрики:
                //        - Форма договора на фабрику:
                //            - создание нового заказа;
                //            - редактирование существующего;
                //        - Форма складской позиции (добавлены дополнительные возможности):
                //            - добовление позиций к договору на фабрику;
                //            - в данной реализации редактирование продуктов производит импорт менеджер
                //            (приложение позволяет внести новые фабрики, коллекции и каталожные номера)
                //            сохранить можно только корректный товар;
                //            позиция считается корректной если в базе существуют выбранные фабрика/коллекция/товар
                //            для сохранения корректного продукта необходимо убедится что все объекты есть
                //            в базе и проставлена себестоимость товара
                //            - если фактор привышает определенное значение фон становится зеленым (Для того чтобы
                //            продажа товара оставалась прибыльной в дополнение к себестоимости товара должна быть
                //            учтены издержки доставки и пр.)
                //            - если все позиции корректы и фактор превышает определенное значение можно отправить заказ
                //            на фабрику 

                // !!! Здесь логическая цепь заканчивается !!!

                Проект является демонстрационным, до продакшена ему далеко. Много нужных проверко еще не готово.
                В нем я посторался показать те знания, которые я приобрел во время курса.
                Конечно в нем есть много не очень правильных решений
                Продолжаю работу над своими знаниями!

                // //////////////Greetnig//////////////////////////////////
                // Hello guys! Welcome to my demo application
                // My name is Andrei. And I want to develop in programming.
                // Here I tried to demonstrate my skills in web development
                // Thank you for your time.
                // It will be great if you give me feedback and list my weak
                // points which I can improve in the future.
                // //////////////////////////////////
    // //////////////////////////////////
    // 
    // //////////////////////////////////
    // Здесь постараюсь показать бизнес логику моего приложения
    // И вы сможете оценить его
    // Я постарался предусмотреть разделение между ролями
    // При дальнейшей проработки есть возможность наделить каждого юзера своими правами
    //  1. Формирование заказа начинается с создания нового клиента
    //      Здесь вносятся данные клиента. Его имя, фамилия, ID и другие необходимые данные
    //  2. Следующее что мы можем сделать это заказ клиента.
    //      При создании договора ему присваевается уникальный номер.
    //      К договору привязывается клента. Подразумевая, что мы точно знаем имя и фамилию клиента
    //      Еще в нем можно указать имя и вознаграждение дизайнера. Если его услугами пользуется клиента
    //      Этот договор служит черновиком, можно посчитать стоимость. Заменить клиента и все позиции, если надо.
    //      Но если по договору внесен платеж, возможность заменить клиента отключается
    //  3. Дальше мы можен добовлять позиции для заказ
    //      Здесь выбираем фабрики, коллекцию, и номер по каталогу. Так же колличество и его стоимоть.
    //      Мебель заказывается на заводах Европы. По этому цена указывается в Евро по праслисту.
    //      Приложение пересчитывает стоимость в местной валюте.
    //      Теперь можно увидеть сохраненные позиции на складе
    //  4. Следующим в игру вступает Бухгалтер. Он имеет возможность привязывать платежы к договорам клиента.
    //      Приложение проверяет. Если по договору оплачено больше половины его стоимости, появляется возможность
    //      отправить договор клиента в работу.
    //      Если его отправить в работу меняется статус позиций и договора. Изменять и удалять позиции теперь нельзя
    //  5. Последним свою работы выполняет снабженец. Для начал он имеет два пути. Он может создать заказ на фабрику и
    //      после этого дабавить в него позиции требующие обработки. Или выбрать позиции которые необходимо обработать и
    //      добавить их в новый или существующий договор на фабрику.
    //      После этого или до снабженец может проверить заказанную позицию. Проверка заключается в том, что он должен
    //      внести правильныую фабрику, коллекция и позицию или добавить новые и установить цену завода изготовителя.
    //      после этого он может пересохранить позицию как корректную.
    //      В данный момент приложение проверяет величину коэффициента. Это упращенный способ проверки рентабельности
    //      заказываемой позиции. Если коэффициента не опускается ниже определенной величины, значит заказ товара с учетом
    //      томожни, доставки и прочих расходов принесет прибыль.
    //      Если все требования соблюдены, то появляется кнопка для отправки обработанных позиций на фабрику.
    //      Здесь логическая цепь заканчивается и всплывает только заглушка. Кроме этого позиции в данном заказе помечаются
    //      как заказанные